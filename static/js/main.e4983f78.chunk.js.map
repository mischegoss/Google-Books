{"version":3,"sources":["BooksAPI.js","Components/Changer.js","Components/Book.js","Components/Shelf.js","Components/SearchButton.js","Components/MainTitle.js","Components/BookCase.js","Components/Search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Changer","state","selectShelf","_this","props","onChangeShelf","setState","componentWillReceiveProps","_this2","this","react_default","a","createElement","className","value","onChange","e","target","disabled","Component","Book","authors","join","url","imageLinks","thumbnail","onClick","style","width","height","backgroundImage","Components_Changer","title","Shelf","name","map","key","Components_Book","SearchButton","react_router_dom","to","MainTitle","BookCase","componentDidMount","onRefreshBooks","shelfUpdater","filter","allShelves","length","Components_MainTitle","Components_Shelf","Components_SearchButton","Search","mergePages","hashTable","forEach","queryTimer","changeQuery","clearTimeout","setTimeout","updateSearch","BooksAPI","response","newList","newError","undefined","error","selectedBooks","type","placeholder","BooksApp","newBook","refreshBooks","list","changeShelf","slice","listBook","push","react_router","exact","path","render","Components_BookCase","Components_Search","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e4983f78.chunk.js","sourcesContent":["\n\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n//const api = \"https://www.googleapis.com/books/v1/volumes?q=quilting\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n\n\n\n","import React, { Component } from \"react\";\n/* This is the changer for the book */\nclass Changer extends Component {\n  state = {\n    selectShelf: this.props.book.shelf || \"none\"\n  };\n\n  onChangeShelf = (book, shelf) => {\n    this.setState({ selectShelf: shelf });\n    this.props.onChangeShelf(book, shelf);\n  };\n\n  componentWillReceiveProps = props => {\n    this.props = props;\n    this.setState({ selectShelf: this.props.book.shelf });\n  };\n\n  render() {\n    return (\n      <div className=\"book-shelf-changer\">\n        <select\n          value={this.state.selectShelf}\n          onChange={e => this.onChangeShelf(this.props.book, e.target.value)}\n        >\n          <option value=\"\" disabled>\n            Move to...\n          </option>\n          <option value=\"currentlyReading\">Currently Reading</option>\n          <option value=\"wantToRead\">Want to Read</option>\n          <option value=\"read\">Read</option>\n          <option value=\"none\">None</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Changer;\n","import React, { Component } from \"react\";\nimport Changer from \"./Changer\";\n\nclass Book extends Component {\n  state = {\n    selectShelf: this.props.book.shelf || \"none\"\n  };\n\n  render() {\n    //For multiple authors\n    const authors =\n      this.props.book.authors && this.props.book.authors.join(\" & \");\n\n    let url =\n      this.props.book.imageLinks &&\n      `url(${this.props.book.imageLinks.thumbnail})`;\n\n    return (\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <button className=\"book-cover-button\" onClick={e => this.props.book}>\n            <div\n              className=\"book-cover\"\n              style={{\n                width: 128,\n                height: 193,\n                backgroundImage: url\n              }}\n            />\n          </button>\n          <Changer\n            book={this.props.book}\n            onChangeShelf={this.props.onChangeShelf}\n          />\n        </div>\n        <div className=\"book-title\">{this.props.book.title}</div>\n        <div className=\"book-authors\">{authors}</div>\n      </div>\n    );\n  }\n}\n\nexport default Book;\n\n\n","import React, {Component} from 'react'\n// import * as BooksAPI from './BooksAPI'\nimport Book from \"./Book\";\n\nclass Shelf extends Component {\n    state = {}\n\n    render() {\n        return (\n            <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">{this.props.shelf.name}</h2>\n                <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n                    {this\n                            .props\n                            .shelf\n                            .books\n                            .map(book => (\n                                <li key={book.id}>\n                                    <Book\n                                        book={book}\n                                        onChangeShelf={this.props.onChangeShelf}/>\n\n                                </li>\n                            ))}\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Shelf;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n/* This is the button the switches over to the search page */\nconst SearchButton = props => {\n  return (\n    <div className=\"open-search\">\n      <Link to=\"./Search\">Search</Link>\n    </div>\n  );\n};\n\nexport default SearchButton;","import React from \"react\";\n\nconst MainTitle = props => {\n  return (\n    <div className=\"list-books-title\">\n      <h1>{props.title}</h1>\n    </div>\n  );\n};\n\nexport default MainTitle;","import React, { Component } from \"react\";\nimport Shelf from \"./Shelf\";\nimport SearchButton from \"./SearchButton\";\nimport MainTitle from \"./MainTitle\";\n\nclass BookCase extends Component {\n  state = {};\n\n  componentDidMount = () => {\n    this.props.onRefreshBooks();\n  };\n// This is the method to update information on individual shelves \n  shelfUpdater = () => {\n    const shelfCurrent = {\n      name: \"Currently Reading\",\n      books: this.props.books.filter(book => book.shelf === \"currentlyReading\")\n    };\n    const shelfWant = {\n      name: \"Want to Read\",\n      books: this.props.books.filter(book => book.shelf === \"wantToRead\")\n    };\n    const shelfRead = {\n      name: \"Read\",\n      books: this.props.books.filter(book => book.shelf === \"read\")\n    };\n\n    return [shelfCurrent, shelfWant, shelfRead];\n  };\n\n  render() {\n    let allShelves = [];\n    if (this.props.books && this.props.books.length)\n      allShelves = this.shelfUpdater();\n    return (\n      <div className=\"app\">\n        <MainTitle title=\"My Books\" />\n        <div className=\"list-books-content\">\n          <div>\n            {allShelves &&\n              allShelves.map(shelf => (\n                <Shelf\n                  key={shelf.name}\n                  shelf={shelf}\n                  onChangeShelf={this.props.onChangeShelf}\n                />\n              ))}\n          </div>\n        </div>\n        <SearchButton />\n      </div>\n    );\n  }\n}\n\nexport default BookCase;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as BooksAPI from \"../BooksAPI\";\nimport Book from \"./Book\";\n\nclass Search extends Component {\n  state = {\n    books: [],\n    query: \"\"\n  };\n\n  mergePages = (shelf, search) => {\n    const hashTable = {};\n    shelf.forEach(book => (hashTable[book.id] = book.shelf));\n    search.forEach(book => {\n      book.shelf = hashTable[book.id] || \"none\";\n    });\n\n    return search;\n  };\n\n  queryTimer = null;\n\n  changeQuery = value => {\n    clearTimeout(this.queryTimer);\n    this.setState({ query: value });\n    this.queryTimer = setTimeout(this.updateSearch, 200);\n  };\n\n  updateSearch = () => {\n    if (this.state.query === \"\") {\n      this.setState({ error: false, books: [] });\n      return;\n    }\n\n    BooksAPI.search(this.state.query).then(response => {\n      let newList = [];\n      let newError = false;\n\n      if (\n        response === undefined ||\n        (response.error && response.error !== \"empty query\")\n      ) {\n        newError = true;\n      } else if (response.length) {\n        newList = this.mergePages(this.props.selectedBooks, response);\n      }\n\n      this.setState({ error: newError, books: newList });\n    });\n  };\n\n  componentWillReceiveProps = props => {\n    this.props = props;\n    let newList = (this.props.selectedBooks, this.state.books);\n    this.setState({ books: newList });\n  };\n\n  render() {\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link className=\"close-search\" to=\"/\">\n            Close\n          </Link>\n          <div className=\"search-books-input-wrapper\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter Search Here\"\n              onChange={e => this.changeQuery(e.target.value)}\n              value={this.state.query.value}\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          {this.state.error && (\n            <div className=\"search-error\">Oh no! Something went wrong</div>\n          )}\n          {!this.state.error && (\n            <span className=\"search-count\">\n              There are &nbsp;{this.state.books.length}&nbsp; books that match\n              your search\n            </span>\n          )}\n\n          <ol className=\"books-grid\">\n            {this.state.books &&\n              this.state.books.map(book => (\n                <li key={book.id}>\n                  <Book book={book} onChangeShelf={this.props.onChangeShelf} />\n                </li>\n              ))}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n\n\n","import React from \"react\";\nimport { Switch, Route} from \"react-router-dom\";\n//import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport \"./App.css\";\nimport BookCase from \"./Components/BookCase\";\nimport Search from \"./Components/Search\";\n\nclass BooksApp extends React.Component {\n  state = {};\n\n  componentDidMount = () => {\n    if (this.state.newBook) {\n      this.refreshBooks();\n    }\n  };\n \n  refreshBooks = () => {\n    BooksAPI.getAll().then(list => {\n      this.setState({\n        books: list,\n        newBook: false\n      });\n    });\n  };\n  // Update the shelf for book\n  changeShelf = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(response => {\n      let newList = this.state.books.slice(0);\n\n      const books = newList.filter(listBook => listBook.id === book.id);\n      if (books.length) {\n        books[0].shelf = shelf;\n      } else {\n        newList.push(book);\n      }\n\n      this.setState({ books: newList });\n    });\n  };\n\n  render() {\n    return (\n\n      \n      <div className=\"app\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <BookCase\n                books={this.state.books}\n                onChangeShelf={this.changeShelf}\n                onRefreshBooks={this.refreshBooks}\n              />\n            )}\n          />\n\n          <Route\n            exact\n            path=\"/Search\"\n            render={() => (\n              <Search\n                selectedBooks={this.state.books}\n                onChangeShelf={this.changeShelf}\n              />\n            )}\n          />\n        </Switch>\n\n        \n      </div>\n\n      \n    );\n  }\n}\n\nexport default BooksApp;\n\n\n\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport {BrowserRouter} from 'react-router-dom';\n/* Wrapped <App/> with Browser Router */\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}
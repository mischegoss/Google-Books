{"ast":null,"code":"var _jsxFileName = \"/Users/tamarauber/Desktop/Google-Books/src/App.js\";\nimport React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport \"./App.css\";\nimport BookCase from \"./Components/BookCase\";\nimport Search from \"./Components/Search\";\n\nclass BooksApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.componentDidMount = () => {\n      if (this.state.newBook) {\n        this.refreshBooks();\n      }\n    };\n\n    this.refreshBooks = () => {\n      BooksAPI.getAll().then(list => {\n        this.setState({\n          books: list,\n          newBook: false\n        });\n      });\n    };\n\n    this.changeShelf = (book, shelf) => {\n      BooksAPI.update(book, shelf).then(response => {\n        let newList = this.state.books.slice(0);\n        const books = newList.filter(listBook => listBook.id === book.id);\n\n        if (books.length) {\n          books[0].shelf = shelf;\n        } else {\n          newList.push(book);\n        }\n\n        this.setState({\n          books: newList\n        });\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/saved\",\n      render: () => React.createElement(BookCase, {\n        books: this.state.books,\n        onChangeShelf: this.changeShelf,\n        onRefreshBooks: this.refreshBooks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => React.createElement(Search, {\n        selectedBooks: this.state.books,\n        onChangeShelf: this.changeShelf,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: () => React.createElement(Search, {\n        selectedBooks: this.state.books,\n        onChangeShelf: this.changeShelf,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default BooksApp;","map":{"version":3,"sources":["/Users/tamarauber/Desktop/Google-Books/src/App.js"],"names":["React","Switch","Route","BooksAPI","BookCase","Search","BooksApp","Component","state","componentDidMount","newBook","refreshBooks","getAll","then","list","setState","books","changeShelf","book","shelf","update","response","newList","slice","filter","listBook","id","length","push","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport \"./App.css\";\nimport BookCase from \"./Components/BookCase\";\nimport Search from \"./Components/Search\";\n\nclass BooksApp extends React.Component {\n  state = {};\n\n  componentDidMount = () => {\n    if (this.state.newBook) {\n      this.refreshBooks();\n    }\n  };\n \n  refreshBooks = () => {\n    BooksAPI.getAll().then(list => {\n      this.setState({\n        books: list,\n        newBook: false\n      });\n    });\n  };\n  // Update the shelf for book\n  changeShelf = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(response => {\n      let newList = this.state.books.slice(0);\n\n      const books = newList.filter(listBook => listBook.id === book.id);\n      if (books.length) {\n        books[0].shelf = shelf;\n      } else {\n        newList.push(book);\n      }\n\n      this.setState({ books: newList });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route\n            exact\n            path=\"/saved\"\n            render={() => (\n              <BookCase\n                books={this.state.books}\n                onChangeShelf={this.changeShelf}\n                onRefreshBooks={this.refreshBooks}\n              />\n            )}\n          />\n\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <Search\n                selectedBooks={this.state.books}\n                onChangeShelf={this.changeShelf}\n              />\n            )}\n          />\n\n<Route\n            exact\n            path=\"/search\"\n            render={() => (\n              <Search\n                selectedBooks={this.state.books}\n                onChangeShelf={this.changeShelf}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/Users/tamarauber/Desktop/book2/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst api = \"https://reactnd-books-api.udacity.com\"; //const api = \"https://www.googleapis.com/books/v1/volumes?q=quilting\"\n// Generate a unique token for storing your bookshelf data on the backend server.\n\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n};\nexport const get = bookId => fetch(\"\".concat(api, \"/books/\").concat(bookId), {\n  headers\n}).then(res => res.json()).then(data => data.book);\nexport const getAll = () => fetch(\"\".concat(api, \"/books\"), {\n  headers\n}).then(res => res.json()).then(data => data.books);\nexport const update = (book, shelf) => fetch(\"\".concat(api, \"/books/\").concat(book.id), {\n  method: 'PUT',\n  headers: _objectSpread({}, headers, {\n    'Content-Type': 'application/json'\n  }),\n  body: JSON.stringify({\n    shelf\n  })\n}).then(res => res.json());\nexport const search = query => fetch(\"\".concat(api, \"/search\"), {\n  method: 'POST',\n  headers: _objectSpread({}, headers, {\n    'Content-Type': 'application/json'\n  }),\n  body: JSON.stringify({\n    query\n  })\n}).then(res => res.json()).then(data => data.books);","map":{"version":3,"sources":["/Users/tamarauber/Desktop/book2/src/BooksAPI.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","get","bookId","fetch","then","res","json","data","book","getAll","books","update","shelf","id","method","body","JSON","stringify","search","query"],"mappings":";AAEA,MAAMA,GAAG,GAAG,uCAAZ,C,CAEA;AAGA;;AACA,IAAIC,KAAK,GAAGC,YAAY,CAACD,KAAzB;AACA,IAAI,CAACA,KAAL,EACEA,KAAK,GAAGC,YAAY,CAACD,KAAb,GAAqBE,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAC,CAAnC,CAA7B;AAEF,MAAMC,OAAO,GAAG;AACd,YAAU,kBADI;AAEd,mBAAiBN;AAFH,CAAhB;AAKA,OAAO,MAAMO,GAAG,GAAIC,MAAD,IACjBC,KAAK,WAAIV,GAAJ,oBAAiBS,MAAjB,GAA2B;AAAEF,EAAAA;AAAF,CAA3B,CAAL,CACGI,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAIA,IAAI,CAACC,IAFrB,CADK;AAKP,OAAO,MAAMC,MAAM,GAAG,MACpBN,KAAK,WAAIV,GAAJ,aAAiB;AAAEO,EAAAA;AAAF,CAAjB,CAAL,CACGI,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAIA,IAAI,CAACG,KAFrB,CADK;AAKP,OAAO,MAAMC,MAAM,GAAG,CAACH,IAAD,EAAOI,KAAP,KACpBT,KAAK,WAAIV,GAAJ,oBAAiBe,IAAI,CAACK,EAAtB,GAA4B;AAC/BC,EAAAA,MAAM,EAAE,KADuB;AAE/Bd,EAAAA,OAAO,oBACFA,OADE;AAEL,oBAAgB;AAFX,IAFwB;AAM/Be,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,IAAAA;AAAF,GAAf;AANyB,CAA5B,CAAL,CAOGR,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,CADK;AAUP,OAAO,MAAMY,MAAM,GAAIC,KAAD,IACpBhB,KAAK,WAAIV,GAAJ,cAAkB;AACrBqB,EAAAA,MAAM,EAAE,MADa;AAErBd,EAAAA,OAAO,oBACFA,OADE;AAEL,oBAAgB;AAFX,IAFc;AAMrBe,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEE,IAAAA;AAAF,GAAf;AANe,CAAlB,CAAL,CAOGf,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EAQGF,IARH,CAQQG,IAAI,IAAIA,IAAI,CAACG,KARrB,CADK","sourcesContent":["\n\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n//const api = \"https://www.googleapis.com/books/v1/volumes?q=quilting\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n\n\n\n"]},"metadata":{},"sourceType":"module"}